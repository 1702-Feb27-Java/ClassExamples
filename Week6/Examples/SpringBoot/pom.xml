<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.revature</groupId>
	<artifactId>SpringBoot</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.4.1.RELEASE</version>
	</parent>

	<!-- Force Maven to us Java 1.8 -->
	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>

		<!-- With this in your classpath, boot knows you are building a Spring 
			MVC application, configuring itself. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- This will enable you to use Spring Data with Spring Boot -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- These are devtools for ease of building. It will restart your server 
			if you make changes to the application while the application is running, 
			among other things. The devtools are automagically disabled when you fully 
			package your project for production release. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

		<!-- The actuator for Spring MVC. Provides some extra rest endpoints for 
			your MVC application such as /health, /beans, and /metrics -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
		<!-- Spring Boot doesn't really want you using JSP's, as you need to add the 
			WEB-INF folder and configure the prefix and suffix in application.properties.
			For your dynamic webpages, it would like you to use ThymeLeaf or FreeMarker.
			This example uses FreeMarker, which is pretty simple to set up. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>
		
		<!-- Provides you with JUnit, Sprint Test (and Spring Boot Test), AssertJ, Hamcrest,
			Mockito, JSONassert, and JsonPath. This example will not be using the testing
			suite, but the dependency is left here to show how you would add testing. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- If you are using an open source SQL driver, insert the dependency 
			as normal. However, Spring Boot wishes to manage the versioning on the driver, 
			so do not provide a version -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-oracle</artifactId>
			<version>1.2.1.RELEASE</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Spring Boot plugin to manage dependencies for you. -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- Integration testing plugin -->
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>