--2.1 SELECT--
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;
--2.2 ORDER BY--
SELECT * FROM ALBUM ORDER BY 'TITLE' DESC;
SELECT * FROM CUSTOMER ORDER BY 'CITY' ASC;
--2.3 INSERT INTO--
INSERT INTO GENRE VALUES
  (26, 'Neo-Pyschedelic'
  );
INSERT INTO GENRE VALUES
  (27, 'Shoegaze'
  );
INSERT
INTO EMPLOYEE VALUES
  (
    19,
    'LESSLEY',
    'NICK',
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
  );
INSERT
INTO EMPLOYEE
  (
    EMPLOYEEID,
    LASTNAME,
    FIRSTNAME
  )
  VALUES
  (
    20,
    'JURCZIK',
    'RYAN'
  );
INSERT
INTO CUSTOMER
  (
    CUSTOMERID,
    LASTNAME,
    FIRSTNAME,
    EMAIL
  )
  VALUES
  (
    60,
    'Lessley',
    'Ryan',
    'ryan@revature.com'
  );
INSERT
INTO CUSTOMER
  (
    CUSTOMERID,
    LASTNAME,
    FIRSTNAME,
    EMAIL
  )
  VALUES
  (
    61,
    'Jurzick',
    'Nick',
    'nick@revature.com'
  );
--2.4 UPDATE--
UPDATE CUSTOMER C
SET C.FIRSTNAME   = 'Robert',
  C.LASTNAME      = 'Walter'
WHERE C.FIRSTNAME = 'Aaron'
AND C.LASTNAME    = 'Mitchell';
UPDATE ARTIST A
SET A.NAME   = 'CCR'
WHERE A.NAME = 'Creedence Clearwater Revival';
--2.5 LIKE--
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';
--2.6 BETWEEN--
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUNE-03' AND '01-MARCH-04';
--2.7 DELETE--
ALTER TABLE CUSTOMER DISABLE CONSTRAINT FK_CustomerSupportRepId;
ALTER TABLE INVOICE DISABLE CONSTRAINT FK_INVOICECUSTOMERID;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
--3.1 SYSTEM DEFINED FUNCTION--
/
CREATE OR REPLACE FUNCTION GET_CURRENT_DATE
  RETURN CURRENT_DATE
IS
  RETURN_DATE CURRENT_DATE;
BEGIN
  SELECT CURRENT_DATE INTO RETURN_DATE FROM DUAL;
  RETURN RETURN_DATE;
END;
/
SELECT CURRENT_DATE FROM DUAL;
/
CREATE OR REPLACE FUNCTION GET_LENGTH
  RETURN NUMBER
IS
  RETURN_LENGTH NUMBER;
BEGIN
  SELECT COUNT(*) INTO RETURN_LENGTH FROM MEDIATYPE;
  RETURN RETURN_LENGTH;
END;
/
SELECT GET_LENGTH FROM DUAL;
/
--3.2 AGGREGATE FUNCTIONS--
CREATE OR REPLACE FUNCTION AVERAGE_TOTAL
  RETURN NUMBER
IS
  AVG_TOTAL NUMBER;
BEGIN
  SELECT AVG(TOTAL) INTO AVG_TOTAL FROM INVOICE;
  RETURN AVG_TOTAL;
END;
/
SELECT AVERAGE_TOTAL FROM INVOICE WHERE INVOICEID = 1;
/
CREATE OR REPLACE FUNCTION MOST_EXPENSIVE
  RETURN NUMBER
IS
  MOST NUMBER;
BEGIN
  SELECT MAX(UNITPRICE) INTO MOST FROM TRACK;
  RETURN MOST;
END;
/
SELECT MOST_EXPENSIVE FROM TRACK WHERE TRACKID = 1;
/
--3.3 USER DEFINED SCALAR FUNCTIONS--
CREATE OR REPLACE FUNCTION AVG_PRICE_INV
  RETURN NUMBER
IS
  RETURN_AVG NUMBER;
BEGIN
  SELECT AVG(UNITPRICE) INTO RETURN_AVG FROM INVOICELINE;
  RETURN RETURN_AVG;
END;
/
SELECT AVG_PRICE_INV FROM INVOICELINE WHERE INVOICELINEID = 1;
/
--3.4 USER DEFINED TABLE VALUED FUNCTIONS--
CREATE OR REPLACE FUNCTION GET_EMPLOYEES_AFTER_DATE (MY_CURSOR OUT SYS_REFCURSOR)
  RETURN SYS_REFCURSOR;
DECLARE
  EMPLOYEE_RECORD MY_CURSOR%ROWTYPE;
  MY_CURSOR SYS_REFCURSOR IS
  SELECT *
  FROM EMPLOYEE
  WHERE BIRTHDATE > '31-DEC-68';
BEGIN
  OPEN MY_CURSOR FOR
    FETCH MY_CURSOR INTO EMPLOYEE_RECORD;
      DBMS_OUTPUT.PUT_LINE(EMPLOYEE_RECORD.FIRSTNAME);
  CLOSE MY_CURSOR;
END;
RETURN EMPLOYEE_RECORD;
/
SELECT GET_EMPLOYEES_AFTER_DATE FROM DUAL;
/

--4.1 BASIC STORED PROCEDURE--
CREATE OR REPLACE PROCEDURE FULLNAME(MY_CURSOR OUT SYS_REFCURSOR)
  IS
    --BEGIN CURSOR
    BEGIN
      --OPEN CURSOR FOR COLUMNS NEEDED FROM TABLE
      OPEN MY_CURSOR FOR SELECT FIRSTNAME,
      LASTNAME FROM EMPLOYEE;
      --C_ID IS EACH INDIVIDUAL ROW CURSOR REFERENCES.
    END;
/
DECLARE
  --VARS, VARNAME TYPE
  CURSORVAR SYS_REFCURSOR;
  --DO %TYPE TO GET THE TYPE OF A VAR
  FN EMPLOYEE.FIRSTNAME%TYPE;
  LN EMPLOYEE.LASTNAME%TYPE;
BEGIN
  --CALL FULLNAME FUNCTION
  FULLNAME(CURSORVAR);
  LOOP
    --FETCH CURSORVAR FROM EACH LINE INTO FN, LN (PREVIOUSLY DECLARED)
    FETCH CURSORVAR INTO FN, LN;
    EXIT
  --WHEN CURSORVAR IS EMPTY
  WHEN CURSORVAR%NOTFOUND;
    --CONSOLE OUTPUT
    --SURROUND EACH PRINTED VAR WITH ||
    DBMS_OUTPUT.PUT_LINE('| ' || FN || ' | ' || LN || ' | ');
  END LOOP;
END;
/
--4.2 STORED PROCEDURE INPUT PARAMETERS--
CREATE OR REPLACE PROCEDURE UPDATE_INFO(
      E_ID           IN NUMBER,
      NEW_ADDR       IN VARCHAR2,
      NEW_CITY       IN VARCHAR2,
      NEW_STATE      IN VARCHAR2,
      NEW_COUNTRY    IN VARCHAR2,
      NEW_POSTALCODE IN VARCHAR2,
      NEW_PHONE      IN VARCHAR2,
      NEW_FAX        IN VARCHAR2,
      NEW_EMAIL      IN VARCHAR2)
  IS
  BEGIN
    UPDATE EMPLOYEE E
    SET E.ADDRESS      = NEW_ADDR,
      E.CITY           = NEW_CITY,
      E.STATE          = NEW_STATE,
      E.COUNTRY        = NEW_COUNTRY,
      E.POSTALCODE     = NEW_POSTALCODE,
      E.PHONE          = NEW_PHONE,
      E.FAX            = NEW_FAX,
      E.EMAIL          = NEW_EMAIL
    WHERE E.EMPLOYEEID = E_ID;
  END;
/
CALL UPDATE_INFO(8, '123 ADDRESS PLACE', 'CITY', 'STATE', 'COUNTRY', 'POSTALCODE', '123-456-7890', '098-765-4321', 'email@email.com');
/
--4.3 BASIC STORED PROCEDURE--
CREATE OR REPLACE PROCEDURE NAMEANDCO(
      MY_CURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN MY_CURSOR FOR SELECT FIRSTNAME,
    LASTNAME,
    COMPANY FROM CUSTOMER;
  END;
/
DECLARE
  CURSORVAR SYS_REFCURSOR;
  FN CUSTOMER.FIRSTNAME%TYPE;
  LN CUSTOMER.LASTNAME%TYPE;
  CUST CUSTOMER.COMPANY%TYPE;
BEGIN
  NAMEANDCO(CURSORVAR);
  LOOP
    FETCH CURSORVAR INTO FN, LN, CUST;
    EXIT
  WHEN CURSORVAR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('| ' || FN || ' | ' || LN || ' | ' || CUST || ' |');
  END LOOP;
END;
/
--create type TABLE--
--5.0 TRANSACTIONS--
SET TRANSACTION READ WRITE NAME 'DELETE_INVOICE';
  BEGIN
    DELETE FROM INVOICE I, CUSTOMER C
    ON 
    WHERE INVOICEID = 1;
  COMMIT;
END;
/
BEGIN
  INVOICE_CHANGE;
END;
--6.1 TRIGGERS--
CREATE SEQUENCE INSERT_SEQ
  MINVALUE 1
  START WITH 1
  INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER AFTER_INSERT_TRIGGER
  AFTER INSERT ON EMPLOYEE
    FOR EACH ROW
  BEGIN
      --NEW IS AN IDENTIFIER FOR DML ROW TRIGGERS
    DBMS_OUTPUT.PUT_LINE('AFTER_INSERT RAN');
  END;
/
INSERT
INTO EMPLOYEE
  (
    EMPLOYEEID,
    LASTNAME,
    FIRSTNAME
  )
  VALUES
  (
    21,
    'LEE',
    'JONATHAN'
  );
/
CREATE OR REPLACE TRIGGER AFTER_UPDATE_TRIGGER
  AFTER UPDATE ON ALBUM
    FOR EACH ROW
  BEGIN
      --NEW IS AN IDENTIFIER FOR DML ROW TRIGGERS
    DBMS_OUTPUT.PUT_LINE('AFTER_UPDATE_TRIGGER RAN');
  END;
/
UPDATE ALBUM A
  SET A.TITLE = 'ZOOTOPIA'
  WHERE ALBUMID = 240;
/
CREATE OR REPLACE TRIGGER AFTER_CUSTOMER_TRIGGER
  AFTER DELETE ON CUSTOMER
    FOR EACH ROW
  BEGIN
      --NEW IS AN IDENTIFIER FOR DML ROW TRIGGERS
    DBMS_OUTPUT.PUT_LINE('AFTER_CUSTOMER_TRIGGER RAN');
  END;
/
DELETE 
  FROM CUSTOMER C
    WHERE C.CUSTOMERID = 61;
/
--7.0 JOINS--
--7.1 INNER--
CREATE OR REPLACE VIEW IJ_CUSTOMER_INVOICE AS
SELECT C.FIRSTNAME AS "Customer Name", I.INVOICEID AS "Invoice Id"
  FROM CUSTOMER C
  INNER JOIN INVOICE I ON C.CUSTOMERID = I.INVOICEID;
/
--7.2 OUTER--
CREATE OR REPLACE VIEW OJ_CUSTOMER_INVOICE AS
SELECT C.FIRSTNAME AS "Customer First Name", C.LASTNAME AS "Customer Last Name", I.INVOICEID AS "Invoice Id", I.TOTAL AS "Invoice Total"
  FROM CUSTOMER C
  OUTER JOIN INVOICE I ON C.CUSTOMERID = I.INVOICEID;
/
--7.3 RIGHT--
CREATE OR REPLACE VIEW RJ_ARTIST_ALBUM AS
SELECT ART.NAME AS "Artist Name", ALB.TITLE AS "Album Title"
  FROM ARTIST ART
  RIGHT JOIN ALBUM ALB ON ART.ARTISTID = ALB.ALBUMID;
/
--7.4 CROSS--
CREATE OR REPLACE VIEW CJ_ARTIST_ALBUM AS
SELECT ARTIST.NAME AS "Artist Name"
  FROM ARTIST
  CROSS JOIN ALBUM
  ORDER BY ARTIST.NAME;
/
--7.5 SELF--
CREATE OR REPLACE VIEW SJ_EMPLOYEE AS
SELECT EMP1.LASTNAME AS "Employee Table 1 Lastname", EMP2.LASTNAME AS "Employee Table 2 Lastname"
  FROM EMPLOYEE EMP1, EMPLOYEE EMP2
  WHERE EMP1.EMPLOYEEID = EMP2.REPORTSTO;
/
--9.0 ADMINISTRATION--
